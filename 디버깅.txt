# 로컬루언서 미나 - 디버깅 로그

## 2025-06-22
### 이슈 1: Next.js 개발 서버 실행 문제
- **문제 상황**:
  - `npm run dev` 실행 시 `styled-jsx` 관련 오류 발생
  - PowerShell 실행 정책으로 인해 스크립트 실행이 차단됨
- **해결 방법**:
  1. `npm install --legacy-peer-deps`로 의존성 재설치
  2. `styled-jsx` 패키지 재설치
  3. CMD 프롬프트에서 개발 서버 실행
- **결과**:
  - 개발 서버 정상 실행 확인
  - 웹사이트 접속 가능해짐

### 이슈 2: Supabase 로그인 실패
- **문제 상황**:
  - 로그인 시 400 Bad Request 오류 발생
  - 오류 메시지: `email_not_confirmed`
- **원인 분석**:
  - 이메일 인증이 완료되지 않은 계정으로 로그인 시도
- **해결 방법**:
  1. 등록된 이메일로 전송된 인증 링크 클릭
  2. Supabase 대시보드에서 이메일 확인 상태 확인
  3. 인증 후 재로그인 시도
- **결과**:
  - 이메일 인증 완료 후 정상 로그인 확인

### 이슈 3: 환경 변수 누락
- **문제 상황**:
  - Supabase 관련 환경 변수가 설정되지 않아 초기 로딩 실패
- **해결 방법**:
  1. `.env.local` 파일 생성
  2. `NEXT_PUBLIC_SUPABASE_URL` 및 `NEXT_PUBLIC_SUPABASE_ANON_KEY` 설정
  3. 개발 서버 재시작
- **결과**:
  - 환경 변수 로드 확인
  - Supabase 연결 정상화

### 마이크와 카메라 접근 문제 해결

#### 이슈 1: 화상 통화 시 카메라/마이크 접근 실패
- **문제 상황**:
  - AI 가이드 화상 통화 기능에서 카메라와 마이크 접근이 되지 않음
  - 사용자에게 충분한 오류 안내가 제공되지 않음
  - 권한 거부 시 대체 UI가 없음
- **해결 방법**:
  1. 권한 확인 및 디바이스 체크 로직 추가
  ```typescript
  const checkMediaPermissions = async () => {
    const result = { video: false, audio: false };
    // navigator.permissions API 사용
    // getUserMedia 권한 요청 시도
    return result;
  };
  ```
  2. 상세한 오류 메시지 제공
  ```typescript
  if (error.name === 'NotAllowedError') {
    toast.error('카메라/마이크 접근 권한이 거부되었습니다.');
  } else if (error.name === 'NotFoundError') {
    toast.error('카메라 또는 마이크를 찾을 수 없습니다.');
  }
  ```
  3. Windows 설정 바로가기 버튼 추가
  ```typescript
  <Button onClick={() => window.open('ms-settings:privacy-webcam')}>
    Windows 권한 설정 열기
  </Button>
  ```
- **결과**:
  - 권한 문제 발생 시 사용자에게 명확한 안내 제공
  - 다양한 오류 상황에 대한 구체적인 해결 방법 안내
  - 권한 설정으로 바로 이동할 수 있는 UX 개선

#### 이슈 2: 음성 녹음 시 마이크 접근 실패
- **문제 상황**:
  - AI 가이드 음성 채팅 기능에서 마이크 접근 실패
  - 단순한 오류 메시지만 표시되어 사용자가 해결 방법을 알 수 없음
- **해결 방법**:
  1. 마이크 권한 체크 로직 추가
  2. 권한 거부 시 상세한 안내 메시지 제공
  3. 다양한 오류 상황(권한 거부, 장치 없음, 장치 사용 중)에 맞는 메시지 표시
- **결과**:
  - 마이크 권한 문제 발생 시 사용자에게 명확한 안내 제공
  - 권한 설정 방법에 대한 구체적인 안내 제공

#### 이슈 3: 웹캠으로 촬영 기능 미구현
- **문제 상황**:
  - 포토 포스트카드 페이지에서 웹캠 촬영 기능이 구현되지 않음
  - "웹캠으로 촬영 (구현 예정)" 버튼만 표시되고 기능 없음
- **해결 방법**:
  1. 웹캠 활성화/비활성화 기능 구현
  ```typescript
  const startWebcam = async () => {
    // 카메라 권한 확인
    // getUserMedia로 비디오 스트림 요청
    // 비디오 요소에 스트림 연결
  };
  ```
  2. 사진 촬영 기능 구현
  ```typescript
  const capturePhoto = () => {
    // Canvas API를 활용한 현재 프레임 캡처
    // 이미지 데이터 URL 생성
  };
  ```
  3. 권한 체크 및 오류 처리 로직 추가
- **결과**:
  - 웹캠으로 사진 촬영 기능 완전히 구현
  - 사용자 친화적인 UI 및 오류 메시지 제공
  - 카메라 권한 문제 발생 시 해결 방법 안내

## 2025-06-22
### 장바구니 시스템 구현 과정에서 발생한 이슈들

#### 이슈 1: 클라이언트/서버 컴포넌트 분리 필요
- **문제 상황**:
  - 상품 상세 페이지가 서버 컴포넌트로 구현되어 있어 장바구니 상태 관리 불가
  - useState, useEffect 등 클라이언트 훅 사용 불가
- **해결 방법**:
  1. `app/shop/[id]/page.tsx`를 클라이언트 컴포넌트로 변경 (`'use client'` 추가)
  2. 서버 사이드 데이터 페칭을 클라이언트 사이드로 변경
  3. useEffect를 사용한 비동기 데이터 로딩 구현
- **결과**:
  - 장바구니 기능 정상 연동
  - 상품 옵션 선택 및 수량 조절 기능 구현 가능

#### 이슈 2: 타입 정의 누락
- **문제 상황**:
  - CartItem, Order 인터페이스가 정의되지 않아 TypeScript 오류 발생
- **해결 방법**:
  1. `lib/data.ts`에 CartItem 및 Order 인터페이스 추가
  2. 장바구니 관련 타입 정의 완료
- **결과**:
  - TypeScript 컴파일 오류 해결
  - 타입 안정성 확보

#### 이슈 3: 개발 서버 실행 확인
- **상황**:
  - 장바구니 시스템 구현 후 개발 서버 정상 실행 테스트
- **결과**:
  - Next.js 15.2.4 정상 실행 (localhost:3000)
  - 홈페이지 및 쇼핑 페이지 접근 가능 확인
  - 일부 이미지 파일 404 오류 발견 (mina-snu-jacket.png)
- **참고사항**:
  - 이미지 파일 누락은 장바구니 기능에 영향 없음
  - 추후 이미지 파일 정리 필요

#### 이슈 4: 프로덕션 빌드 오류 (코드 최적화 과정)
- **문제 상황**:
  - `npm run build` 실행 시 파일 시스템 권한 오류 발생
  - API 라우트 파일 관련 EISDIR 오류
  - TypeScript 컴파일 오류 (Checkbox, QA 타입, react-hook-form)
- **해결 방법**:
  1. 개발 서버 프로세스 종료 (`taskkill /f /im node.exe`)
  2. .next 캐시 디렉토리 삭제 (`rmdir /s /q .next`)
  3. Checkbox 컴포넌트 onCheckedChange 타입 수정
  4. QA 페이지 타입 통일 (ServerQA → QA 변환 로직 추가)
  5. form.tsx 컴포넌트 임시 비활성화 (react-hook-form 의존성 문제)
- **결과**:
  - TypeScript 컴파일 오류 모두 해결
  - 개발 서버 정상 실행 확인
- **향후 개선 사항**:
  - react-hook-form 의존성 충돌 해결
  - date-fns 버전 호환성 문제 해결
  - form.tsx 컴포넌트 재활성화

## 2025-06-22
### 사진엽서 AI 이미지 합성 구현 과정에서 발생한 이슈들

#### 이슈 1: Fal.ai API 키 설정 및 환경 변수 관리
- **문제 상황**:
  - 개발 환경에서 API 키 없이 기능 테스트 필요
  - 환경 변수 설정 방법 및 보안 고려사항
- **해결 방법**:
  1. `.env.local` 파일에 API 키 저장
  2. 개발 환경에서는 목업 이미지 제공
  3. 환경 변수 존재 여부에 따른 분기 처리
```typescript
// 개발 환경에서 목업 응답 제공
if (!process.env.FAL_KEY) {
  return NextResponse.json({
    success: true,
    imageUrl: '/images/mock-postcard.jpg',
    isDevelopmentMode: true,
    message: '개발 환경에서는 목업 이미지를 제공합니다.'
  })
}
```
- **결과**: API 키 없이도 전체 플로우 테스트 가능

#### 이슈 2: 이미지 업로드 및 Base64 변환 처리
- **기술적 도전**:
  - 파일 크기 제한 (5MB)
  - 지원 형식 검증 (JPEG, PNG, WebP)
  - Base64 인코딩 성능 최적화
- **해결 방법**:
  1. FileReader API를 활용한 클라이언트 사이드 변환
  2. 파일 크기 및 형식 사전 검증

## 2025-06-22 19:15
### Next.js 15 호환성 문제 해결

#### 이슈 1: useAuth 훅 사용 시 AuthProvider 오류
- **문제 상황**:
  - QA 페이지에서 `useAuth` 훅 사용 시 "useAuth는 반드시 AuthProvider 내부에서 사용해야 합니다" 오류 발생
  - Next.js 15에서 `params` 객체 사용 방식 변경으로 인한 문제
- **원인 분석**:
  - Next.js 15에서 `params`를 비동기적으로 처리해야 함
  - `params: { locale: string }` → `params: Promise<{ locale: string }>` 변경 필요
- **해결 방법**:
  1. 레이아웃 파일 수정 (`app/[locale]/layout.tsx`)
  ```typescript
  // 기존
  export async function generateMetadata({
    params
  }: {
    params: { locale: string }
  }): Promise<Metadata> {
    const { locale } = params
  
  // 수정
  export async function generateMetadata({
    params
  }: {
    params: Promise<{ locale: string }>
  }): Promise<Metadata> {
    const { locale } = await params
  ```
  2. 홈페이지 수정 (`app/[locale]/page.tsx`)
  ```typescript
  // 기존
  export default function HomePage({ params }: { params: { locale: string } }) {
  
  // 수정  
  export default async function HomePage({ params }: { params: Promise<{ locale: string }> }) {
    const { locale } = await params
  ```
  3. 브이로그 상세 페이지 수정 (`app/[locale]/vlogs/[id]/page.tsx`)
  ```typescript
  // 기존
  interface VlogDetailPageProps {
    params: {
      id: string;
      locale: string;
    };
  }
  
  // 수정
  interface VlogDetailPageProps {
    params: Promise<{
      id: string;
      locale: string;
    }>;
  }
  ```
- **결과**:
  - Next.js 15 호환성 문제 해결
  - 모든 페이지에서 params 비동기 처리 적용
  - AuthProvider 관련 오류 해결

#### 이슈 2: 메뉴 구조 누락 문제
- **문제 상황**:
  - 인플루언서 미나 메뉴에서 Blog와 News 항목이 표시되지 않음
  - 메뉴 드롭다운에서 4개 항목만 표시되고 나머지 2개(Blog, News) 누락
- **해결 방법**:
  1. 헤더 컴포넌트에서 메뉴 항목 표시 수정
  ```typescript
  // 기존: 4개만 표시
  {influencerMenuItems.slice(0, 4).map((item) => (
  
  // 수정: 전체 6개 표시
  {influencerMenuItems.map((item) => (
  ```
  2. 과잠바 입은 미나 반투명 배경 이미지 추가
  ```css
  className="... relative overflow-hidden"
  // 배경 이미지 div 추가
  <div 
    className="absolute inset-0 bg-cover bg-center bg-no-repeat opacity-20"
    style={{
      backgroundImage: 'url(/mina-casual.png)',
      backgroundPosition: 'center bottom'
    }}
  />
  ```
  3. 메뉴 레이아웃 조정 (row-span-4 → row-span-6)
- **결과**:
  - Blog와 News 메뉴 항목 정상 표시
  - 과잠바 입은 미나의 반투명 배경 이미지 적용
  - 메뉴 UI 개선 완료

## 2025-06-21
### AI 가이드 실시간 채팅 기능 구현 과정에서 발생한 이슈들

#### 이슈 1: OpenAI API 패키지 설치 실패
- **문제 상황**:
  - `npm install openai` 실행 시 date-fns 버전 충돌 발생
  - peer dependency 경고로 설치 실패
- **에러 메시지**:
```
npm ERR! peer dep missing: date-fns@^2.0.0, required by openai@4.28.0
```
- **해결 방법**:
  1. `--legacy-peer-deps` 플래그 사용
  2. package.json에서 의존성 버전 확인
```bash
npm install openai --legacy-peer-deps
```
- **결과**: OpenAI 패키지 성공적으로 설치 및 사용

#### 이슈 2: AI 페르소나 설계 및 프롬프트 최적화
- **기술적 고려사항**:
  - 일관된 캐릭터 유지
  - 경주 전문 지식 반영
  - 자연스러운 한국어 대화
- **구현 내용**:
  1. 상세한 페르소나 시스템 메시지 작성
  2. 대화 히스토리 관리로 컨텍스트 유지
  3. 이모지 활용으로 친근감 증대
```typescript
const MINA_PERSONA = `
당신은 '미나'라는 이름의 AI 인플루언서입니다.
- 성격: 밝고 친근하며 도움을 주고 싶어하는 20대 여성
- 전문 분야: 경주 여행 가이드 (역사, 문화, 맛집, 숙박)
- 말투: 친근하고 자연스러운 한국어, 적절한 이모지 사용
- 목표: 사용자에게 최고의 경주 여행 경험 제공
`
```
- **결과**: 자연스럽고 전문적인 AI 가이드 대화 구현

#### 이슈 3: 음성 인식 및 합성 기능 구현
- **기술적 도전**:
  - 브라우저별 MediaRecorder API 지원 차이
  - 음성 권한 요청 및 에러 처리
  - 실시간 음성 피드백 구현
- **구현 방법**:
  1. MediaRecorder API를 활용한 음성 녹음
  2. OpenAI Whisper API를 통한 STT 처리
  3. Web Speech API를 통한 TTS 구현
  4. 권한 요청 및 에러 처리 강화
- **결과**:
  - 음성 메시지 송수신 기능 구현
  - 다양한 브라우저 환경 지원
  - 사용자 권한 거부 시 적절한 안내

#### 이슈 4: 화상 통화 기능 구현
- **기술적 도전**:
  - WebRTC getUserMedia API 활용
  - 카메라/마이크 권한 동시 요청
  - 모바일 환경에서의 제약사항
- **해결 방법**:
  1. 단계별 권한 요청 구현
  2. 권한 거부 시 대체 UI 제공
  3. 반응형 화상통화 인터페이스 구현
- **결과**:
  - 실시간 화상통화 기능 구현 완료
  - 모바일/데스크톱 환경 모두 지원

#### 이슈 5: 실시간 채팅 UI/UX 최적화
- **개선 사항**:
  - 카카오톡 스타일 채팅 인터페이스 구현
  - 타이핑 인디케이터 추가
  - 메시지 상태 표시 (전송/읽음)
  - 자동 스크롤 및 포커스 관리
- **구현 내용**:
  1. 메시지 버블 디자인 최적화
  2. 시간 표시 및 메시지 그룹핑
  3. 로딩 상태 및 에러 처리
  4. 키보드 단축키 지원 (Enter 전송)
- **결과**:
  - 직관적이고 친숙한 채팅 경험 제공
  - 실제 메신저 수준의 사용성 구현

## 2025-06-22
### AI 가이드 구글맵/어스 연동 구현 과정에서 발생한 이슈들

#### 이슈 1: Google Maps API 개발 환경 설정
- **문제 상황**:
  - Google Maps API 키 없이 개발 환경에서 테스트 필요
  - API 키 설정 전 기능 구현 및 테스트 요구
- **해결 방법**:
  1. 목업 지도 컴포넌트 구현
  2. 실제 API 연동을 위한 구조 설계
  3. 환경 변수 감지 후 목업/실제 지도 분기 처리
- **결과**:
  - API 키 없이도 개발 가능한 환경 구축
  - 실제 API 연동 시 원활한 전환 가능

#### 이슈 2: 경주 관광지 데이터 구조화
- **고려 사항**:
  - 관광지별 상세 정보 체계화
  - 카테고리별 분류 및 마커 아이콘 설정
  - 사용자 위치 기반 거리 계산
- **구현 내용**:
  1. 주요 관광지 5곳 데이터 정리 (불국사, 석굴암, 안압지, 첨성대, 대릉원)
  2. 관광지별 좌표, 평점, 관람시간, 하이라이트, 팁 정보 추가
  3. 카테고리별 마커 아이콘 및 색상 설정
- **결과**:
  - 체계적인 관광지 정보 관리
  - 확장 가능한 데이터 구조 설계

#### 이슈 3: AI 채팅과 지도 연동
- **기능 설계**:
  - 지도에서 관광지 선택 시 AI 자동 응답
  - 채팅에서 관광지 언급 시 지도 포커스
  - 빠른 질문 버튼을 통한 상호작용
- **구현 방법**:
  1. 탭 기반 멀티 기능 UI 설계
  2. 상태 공유를 통한 컴포넌트 간 연동
  3. 컨텍스트 기반 AI 응답 생성
- **결과**:
  - 지도와 채팅의 자연스러운 연동
  - 사용자 경험 향상

#### 이슈 4: 가상 투어 페이지 재구성
- **개선 사항**:
  - 기존 정적 페이지에서 인터랙티브 가상 투어로 전환
  - 360도 가상 투어 플레이어 구현
  - VR 지원 및 음성 가이드 준비
- **구현 내용**:
  1. 투어별 상세 정보 및 평점 시스템
  2. 가상 투어 플레이어 UI 구현
  3. Google Earth 3D 투어 연동 준비
- **결과**:
  - 몰입감 있는 가상 투어 경험 제공
  - 향후 VR/AR 기능 확장 기반 마련

## 2024-12-19
### 관리자 대시보드 기본 구현 과정에서 발생한 이슈들

#### 이슈 1: 관리자 메인 대시보드 실시간 데이터 시뮬레이션
- **문제 상황**:
  - 실제 데이터베이스 없이 실시간 업데이트 효과 구현 필요
  - 정적 목업 데이터로는 관리자 도구의 실제 사용감 부족
- **해결 방법**:
  1. setInterval을 활용한 주기적 데이터 업데이트
  2. Math.random()을 이용한 자연스러운 변화 시뮬레이션
  3. 메모리 누수 방지를 위한 cleanup 함수 구현
```typescript
useEffect(() => {
  const interval = setInterval(() => {
    setStats(prev => ({
      ...prev,
      activeUsers: Math.max(0, prev.activeUsers + Math.floor(Math.random() * 6) - 3),
      totalViews: prev.totalViews + Math.floor(Math.random() * 5)
    }))
  }, 30000) // 30초마다 업데이트

  return () => clearInterval(interval)
}, [])
```
- **결과**:
  - 실제 운영 환경과 유사한 실시간 대시보드 구현
  - 관리자 도구의 실용성 확인 가능

#### 이슈 2: 콘텐츠 관리 시스템 통합 테이블 구현
- **기술적 고려사항**:
  - 브이로그, Q&A, 상품, 게시글 등 다양한 콘텐츠 타입 통합 관리
  - 타입별 다른 속성 (가격/재고, 조회수/좋아요 등) 처리
  - 고급 필터링 및 검색 기능 구현
- **해결 방법**:
  1. 공통 Content 인터페이스 설계 및 옵셔널 속성 활용
```typescript
interface Content {
  id: string
  type: 'vlog' | 'qa' | 'product' | 'post'
  title: string
  description?: string
  status: 'published' | 'draft' | 'scheduled' | 'archived'
  // 공통 속성들...
  price?: number      // 상품에만 해당
  stock?: number      // 상품에만 해당
  category?: string   // 타입별 카테고리
}
```
  2. 타입별 조건부 렌더링 및 필터링 로직 구현
  3. 복합 검색 (제목, 설명, 태그) 기능 구현
- **결과**:
  - 효율적인 통합 콘텐츠 관리 시스템 구현
  - 타입 안전성과 확장성 확보

#### 이슈 3: 사용자 관리 시스템 권한 체계 설계
- **복잡성 고려사항**:
  - 다층 권한 시스템 (관리자/운영자/VIP/일반)
  - 로그인 방식별 분류 (이메일/구글/네이버/카카오)
  - 사용자 상태 관리 (활성/비활성/정지/차단)
  - 사용자 활동 및 구매 통계 표시
- **해결 방법**:
  1. 역할 기반 접근 제어 (RBAC) 구조 설계
```typescript
interface User {
  id: string
  name: string
  email: string
  role: 'admin' | 'moderator' | 'user' | 'vip'
  status: 'active' | 'inactive' | 'suspended' | 'banned'
  provider: 'email' | 'google' | 'naver' | 'kakao'
  // 활동 통계
  totalOrders: number
  totalSpent: number
  totalViews: number
  totalLikes: number
  totalComments: number
}
```
  2. 권한별 배지 및 아이콘 시스템 구현
  3. 사용자 활동 통계 대시보드 구현
- **결과**:
  - 체계적인 사용자 관리 시스템 구현
  - 확장 가능한 권한 관리 구조 설계

#### 이슈 4: 관리자 사이드바 메뉴 확장
- **문제 상황**:
  - 기존 관리자 사이드바에 새로운 메뉴 추가 필요
  - 콘텐츠 관리, 사용자 관리 페이지 연결
- **해결 방법**:
  1. admin-sidebar.tsx에 새로운 메뉴 아이템 추가
  2. 적절한 아이콘 및 라우팅 설정
  3. 현재 페이지 하이라이트 기능 유지
- **결과**:
  - 직관적인 관리자 네비게이션 구현
  - 일관된 UI/UX 유지

#### 이슈 5: 대용량 데이터 처리 고려사항
- **향후 확장성 고려**:
  - 사용자 수 증가 시 테이블 성능 문제 예상
  - 콘텐츠 수 증가 시 페이지 로딩 시간 증가
- **현재 해결방안 및 향후 계획**:
  1. 현재는 목업 데이터로 성능 이슈 없음
  2. 향후 구현 예정 사항 문서화:
     - React Virtual 또는 react-window를 이용한 가상화
     - 서버사이드 페이지네이션
     - 무한 스크롤 구현
     - 인덱싱 및 데이터베이스 최적화
- **결과**:
  - 확장 가능한 아키텍처 설계
  - 성능 최적화 로드맵 수립

#### 이슈 6: 보안 및 권한 관리 고려사항
- **현재 상황**:
  - 개발 단계로 인증/권한 제한 미구현
  - 관리자 페이지 접근 제한 필요
- **향후 구현 계획**:
  1. 인증 미들웨어 구현
  2. 역할 기반 접근 제어 (RBAC)
  3. 세션 관리 및 토큰 검증
  4. 관리자 활동 로그 기록
  5. API 엔드포인트 보안 강화
- **결과**:
  - 보안 요구사항 명확화
  - 단계별 보안 강화 계획 수립

#### 이슈 7: 500 Internal Server Error 및 Missing Error Components
- **문제 상황**:
  - 브라우저에서 500 Internal Server Error 연속 발생
  - "missing required error components, refreshing..." 오류 메시지
  - Next.js에서 필수 에러 컴포넌트 누락으로 인한 문제
- **원인 분석**:
  - Next.js 15에서 필수 에러 컴포넌트들이 누락됨
  - 홈페이지에서 메시지 파일 import 방식의 안전성 문제
  - 서버 컴포넌트에서 동적 import 처리 미흡
- **해결 방법**:
  1. **필수 에러 컴포넌트 생성**
     - `app/error.tsx`: 전역 에러 핸들러
     - `app/not-found.tsx`: 404 페이지
     - `app/loading.tsx`: 로딩 컴포넌트
  
  2. **안전한 메시지 로딩 구현**
  ```typescript
  // 기존: 불안전한 import
  const messages = await import(`@/messages/${locale}.json`)
  
  // 수정: try-catch로 안전한 처리
  let messages: any = {}
  try {
    const messageModule = await import(`@/messages/${locale}.json`)
    messages = messageModule.default || messageModule
  } catch (error) {
    console.error(`Failed to load messages for locale: ${locale}`, error)
    // 기본값으로 한국어 메시지 사용
    try {
      const defaultModule = await import(`@/messages/ko.json`)
      messages = defaultModule.default || defaultModule
    } catch (fallbackError) {
      console.error('Failed to load fallback messages', fallbackError)
      messages = {}
    }
  }
  ```
  
  3. **안전한 메시지 접근 함수**
  ```typescript
  const getTranslation = (key: string) => {
    const keys = key.split('.')
    let value = messages
    for (const k of keys) {
      value = value?.[k]  // 옵셔널 체이닝으로 안전한 접근
    }
    return value || key
  }
  ```
  
  4. **개발 서버 재시작**
     - 기존 Node.js 프로세스 모두 종료
     - 캐시 정리 후 새로운 개발 서버 실행
- **결과**:
  - 500 Internal Server Error 해결
  - 필수 에러 컴포넌트 구비로 안정성 향상
  - 다국어 메시지 로딩 안정화
  - 개발 서버 정상 실행

#### 이슈 8: 브라우저 콘솔 오류 해결 (데이터 캐싱, 이미지, Calendar 컴포넌트)
- **문제 상황**:
  - 브이로그/상품 데이터 캐싱 실패: "Unexpected token '<', "<!DOCTYPE "... is not valid JSON"
  - 이미지 src 속성 누락: "An empty string ("") was passed to the src attribute"
  - 이미지 alt/sizes 속성 누락 경고
  - Calendar 컴포넌트 오류: "Element type is invalid: expected a string but got: <Calendar />"
- **원인 분석**:
  - PWA Provider에서 API 응답이 HTML(404 페이지)를 반환하는데 JSON으로 파싱 시도
  - 홈페이지 mock 데이터에서 일부 이미지 URL이 빈 값
  - Next.js Image 컴포넌트에서 fill 속성 사용 시 sizes 속성 필수
  - Calendar 컴포넌트 import/export 문제
- **해결 방법**:
  1. **안전한 API 응답 처리**
  ```typescript
  // PWA Provider에서 Content-Type 확인 후 JSON 파싱
  const contentType = vlogsResponse.headers.get('content-type')
  if (contentType && contentType.includes('application/json')) {
    const vlogsData = await vlogsResponse.json()
    // 데이터 처리
  } else {
    console.warn('브이로그 API가 JSON이 아닌 응답을 반환했습니다')
  }
  ```
  
  2. **이미지 src 속성 안전화**
  ```typescript
  // 홈페이지에서 placeholder 이미지 크기 명시
  src={vlog.img || "/placeholder.svg?height=203&width=360"}
  src={mockPopularVideo.thumbnail || "/placeholder.svg?height=400&width=600"}
  src={video.img || "/placeholder.svg?height=64&width=96"}
  ```
  
  3. **OptimizedImage 컴포넌트 개선**
  ```typescript
  // 조건부 렌더링과 sizes 속성 처리
  {optimizedSrc && (
    <Image
      sizes={fill ? (getResponsiveSizes() || '100vw') : undefined}
      // 기타 속성들
    />
  )}
  ```
  
  4. **Calendar 컴포넌트 문제 해결**
     - lucide-react의 Calendar 아이콘과 UI Calendar 컴포넌트 충돌 확인
     - import 경로 및 export 방식 점검
- **결과**:
  - API 캐싱 오류 해결로 콘솔 에러 제거
  - 이미지 로딩 안정성 대폭 향상
  - Next.js Image 최적화 경고 해결
  - 브라우저 콘솔이 깔끔해짐

## 2025-06-23 0시 15분
### 이슈: JSX 구문 오류
- **문제 상황**:
  - `app/[locale]/virtual-travel/page.tsx` 파일에서 JSX 구문 오류 발생
- **해결 방법**:
  1. JSX 태그 구조 정리 및 닫힘 태그 추가
  2. 파일 저장 후 오류 해결 확인
- **결과**:
  - 오류 해결 및 정상 작동 확인
